# Brute force

To analyze the best case, average case, and worst case of the algorithm, we can consider the characteristics of the problem and the algorithm's behavior.

In this case, we are using a brute force approach where we generate all permutations of the job names.
The time complexity of generating permutations is O(n!), where n is the number of jobs.
Therefore, the time complexity of this algorithm is O(n! * m), where m is the complexity of calculating the profit for a given schedule.

Now let's analyze the best case, average case, and worst case scenarios:

(1) Best Case:

The best case occurs when the first schedule we generate results in the maximum profit.
In this case, the algorithm will still iterate over all permutations, but the first one will be the best,
resulting in a maximum profit without having to check all other possibilities.
The best case time complexity is O(n! * m).

(2) Average Case:

The average case occurs when the maximum profit is achieved somewhere in the middle of the generated permutations.
On average, the algorithm will need to check roughly half of the permutations before finding the maximum profit.
The average case time complexity is also O(n! * m).

(3) Worst Case:

The worst case occurs when the maximum profit is achieved in the last generated permutation.
In this case, the algorithm will need to iterate through all possible permutations before finding the maximum profit.
The worst case time complexity is O(n! * m).
Overall, the time complexity of the algorithm remains O(n! * m) in all cases, as the number of permutations is fixed based on the number of jobs.
However, the actual time taken will vary based on the specific job input and the order in which the permutations are generated.



# Greedy

Here is a more detailed explanation of the time complexities of the algorithm for the best case, average case, and worst case:

(1) Best case: In the best case, the jobs are sorted in descending order of profit and their deadlines are in ascending order.
This means that the algorithm will be able to assign the most profitable jobs to the earliest deadlines.
As a result, the maximum profit will be achieved and the algorithm will only need to iterate through the jobs once, resulting in a time complexity of O(n).

(2) Average case: In the average case, the jobs are randomly sorted. This means that the algorithm will not be able to achieve the maximum profit,
but it will still be able to achieve a high profit. The exact profit that the algorithm will achieve will depend on the random order of the jobs.
The algorithm will need to iterate through the jobs multiple times to find the best possible schedule, resulting in a time complexity of O(n log n).

(3) Worst case: In the worst case, the jobs are sorted in ascending order of profit and their deadlines are in descending order.
This means that the algorithm will not be able to assign any of the jobs to the schedule.
As a result, the maximum profit will not be achieved and the algorithm will need to iterate through the jobs n times, resulting in a time complexity of O(n^2).